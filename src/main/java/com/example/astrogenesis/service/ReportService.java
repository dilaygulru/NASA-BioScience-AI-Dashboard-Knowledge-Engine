package com.example.astrogenesis.service;

import com.example.astrogenesis.entity.Publication;
import com.example.astrogenesis.repository.PublicationRepository;
import org.springframework.core.io.InputStreamResource;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.draw.LineSeparator;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ReportService {

    private final PublicationRepository publicationRepository;
    private final LLMService llmService;

    @Autowired
    public ReportService(PublicationRepository publicationRepository, LLMService llmService) {
        this.publicationRepository = publicationRepository;
        this.llmService = llmService;
    }

    /**
     * üß† Generate a comprehensive, professional PDF report with AI analysis, charts, and statistics.
     */
    public InputStreamResource generatePdf(String query) {
        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            Document document = new Document(PageSize.A4, 40, 40, 50, 50);
            PdfWriter writer = PdfWriter.getInstance(document, out);

            // Add header and footer
            HeaderFooterPageEvent event = new HeaderFooterPageEvent();
            writer.setPageEvent(event);

            document.open();

            // Define professional fonts and colors
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 24, BaseColor.DARK_GRAY);
            Font subtitleFont = FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.GRAY);
            Font sectionFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, new BaseColor(54, 162, 235));
            Font headingFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14, BaseColor.BLACK);
            Font normalFont = FontFactory.getFont(FontFactory.HELVETICA, 11, BaseColor.BLACK);
            Font smallFont = FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.DARK_GRAY);

            // ===== TITLE PAGE =====
            Paragraph mainTitle = new Paragraph("NASA BioScience\nAnalytical Report", titleFont);
            mainTitle.setAlignment(Element.ALIGN_CENTER);
            mainTitle.setSpacingAfter(10);
            document.add(mainTitle);

            Paragraph subtitle = new Paragraph("Generated by Astrogenesis AI Dashboard", subtitleFont);
            subtitle.setAlignment(Element.ALIGN_CENTER);
            subtitle.setSpacingAfter(30);
            document.add(subtitle);

            // Report metadata box
            PdfPTable metaTable = new PdfPTable(2);
            metaTable.setWidthPercentage(70);
            metaTable.setHorizontalAlignment(Element.ALIGN_CENTER);
            metaTable.setSpacingAfter(20);

            addMetaCell(metaTable, "Query:", query, normalFont);
            addMetaCell(metaTable, "Generated:", new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date()), normalFont);
            addMetaCell(metaTable, "Report Type:", "Comprehensive AI Analysis", normalFont);

            document.add(metaTable);

            document.add(new Paragraph("\n"));
            addSeparator(document);

            // ===== AI ANALYSIS SECTION =====
            Paragraph aiSection = new Paragraph("\nüß† AI-Generated Analysis\n\n", sectionFont);
            document.add(aiSection);

            // Get AI analysis
            Map<String, Object> aiReport = llmService.generateAnalyticalReport(query);

            // Summary
            String summary = (String) aiReport.getOrDefault("summary", "No analysis available.");
            Paragraph summaryPara = new Paragraph(summary, normalFont);
            summaryPara.setAlignment(Element.ALIGN_JUSTIFIED);
            summaryPara.setSpacingAfter(15);
            document.add(summaryPara);

            // Scientific Progress
            if (aiReport.containsKey("scientificProgress") && aiReport.get("scientificProgress") instanceof Map) {
                document.add(new Paragraph("\nüöÄ Scientific Progress & Achievements\n", sectionFont));
                Map<String, Object> progress = (Map<String, Object>) aiReport.get("scientificProgress");

                if (progress != null && progress.containsKey("achievements") && progress.get("achievements") instanceof List) {
                    document.add(new Paragraph("Key Achievements:", headingFont));
                    List<String> achievements = (List<String>) progress.get("achievements");
                    if (achievements != null && !achievements.isEmpty()) {
                        com.itextpdf.text.List achievementsList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                        achievementsList.setListSymbol("‚úì ");
                        for (String achievement : achievements) {
                            if (achievement != null) {
                                achievementsList.add(new ListItem(achievement, normalFont));
                            }
                        }
                        document.add(achievementsList);
                    }
                }

                if (progress != null && progress.containsKey("timeline") && progress.get("timeline") != null) {
                    document.add(new Paragraph("Timeline: " + progress.get("timeline"), normalFont));
                }
                document.add(new Paragraph(" "));
            }

            // Knowledge Gaps
            if (aiReport.containsKey("knowledgeGaps") && aiReport.get("knowledgeGaps") instanceof Map) {
                document.add(new Paragraph("\nüîç Knowledge Gaps & Research Priorities\n", sectionFont));
                Map<String, Object> gaps = (Map<String, Object>) aiReport.get("knowledgeGaps");

                if (gaps != null && gaps.containsKey("criticalGaps") && gaps.get("criticalGaps") instanceof List) {
                    document.add(new Paragraph("Critical Gaps:", headingFont));
                    List<String> criticalGaps = (List<String>) gaps.get("criticalGaps");
                    if (criticalGaps != null && !criticalGaps.isEmpty()) {
                        com.itextpdf.text.List gapsList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                        gapsList.setListSymbol("‚ùó ");
                        for (String gap : criticalGaps) {
                            if (gap != null) {
                                gapsList.add(new ListItem(gap, normalFont));
                            }
                        }
                        document.add(gapsList);
                    }
                }

                if (gaps != null && gaps.containsKey("suggestedStudies") && gaps.get("suggestedStudies") instanceof List) {
                    document.add(new Paragraph("\nSuggested Future Studies:", headingFont));
                    List<String> studies = (List<String>) gaps.get("suggestedStudies");
                    if (studies != null && !studies.isEmpty()) {
                        com.itextpdf.text.List studiesList = new com.itextpdf.text.List(com.itextpdf.text.List.ORDERED);
                        for (String study : studies) {
                            if (study != null) {
                                studiesList.add(new ListItem(study, normalFont));
                            }
                        }
                        document.add(studiesList);
                    }
                }
                document.add(new Paragraph(" "));
            }

            // Consensus
            if (aiReport.containsKey("consensus") && aiReport.get("consensus") instanceof Map) {
                document.add(new Paragraph("\n‚öñÔ∏è Scientific Consensus & Debates\n", sectionFont));
                Map<String, Object> consensus = (Map<String, Object>) aiReport.get("consensus");

                if (consensus != null && consensus.containsKey("agreements") && consensus.get("agreements") instanceof List) {
                    document.add(new Paragraph("Areas of Consensus:", headingFont));
                    List<String> agreements = (List<String>) consensus.get("agreements");
                    if (agreements != null && !agreements.isEmpty()) {
                        com.itextpdf.text.List agreementsList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                        agreementsList.setListSymbol("‚úÖ ");
                        for (String agreement : agreements) {
                            if (agreement != null) {
                                agreementsList.add(new ListItem(agreement, normalFont));
                            }
                        }
                        document.add(agreementsList);
                    }
                }

                if (consensus != null && consensus.containsKey("disagreements") && consensus.get("disagreements") instanceof List) {
                    document.add(new Paragraph("\nAreas of Debate:", headingFont));
                    List<String> disagreements = (List<String>) consensus.get("disagreements");
                    if (disagreements != null && !disagreements.isEmpty()) {
                        com.itextpdf.text.List disagreementsList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                        disagreementsList.setListSymbol("‚ö†Ô∏è ");
                        for (String disagreement : disagreements) {
                            if (disagreement != null) {
                                disagreementsList.add(new ListItem(disagreement, normalFont));
                            }
                        }
                        document.add(disagreementsList);
                    }
                }
                document.add(new Paragraph(" "));
            }

            // Mission Relevance
            if (aiReport.containsKey("missionRelevance") && aiReport.get("missionRelevance") instanceof Map) {
                document.add(new Paragraph("\nüåôüî¥ Mission Relevance (Moon & Mars)\n", sectionFont));
                Map<String, Object> mission = (Map<String, Object>) aiReport.get("missionRelevance");

                if (mission != null && mission.containsKey("moonMissions") && mission.get("moonMissions") != null) {
                    document.add(new Paragraph("üåô Lunar Missions:", headingFont));
                    document.add(new Paragraph(String.valueOf(mission.get("moonMissions")), normalFont));
                    document.add(new Paragraph(" "));
                }

                if (mission != null && mission.containsKey("marsMissions") && mission.get("marsMissions") != null) {
                    document.add(new Paragraph("üî¥ Mars Missions:", headingFont));
                    document.add(new Paragraph(String.valueOf(mission.get("marsMissions")), normalFont));
                    document.add(new Paragraph(" "));
                }

                if (mission != null && mission.containsKey("riskFactors") && mission.containsKey("mitigationStrategies")
                    && mission.get("riskFactors") instanceof List && mission.get("mitigationStrategies") instanceof List) {

                    List<String> risks = (List<String>) mission.get("riskFactors");
                    List<String> mitigations = (List<String>) mission.get("mitigationStrategies");

                    if (risks != null && mitigations != null && (!risks.isEmpty() || !mitigations.isEmpty())) {
                        document.add(new Paragraph("Risk Factors & Mitigation:", headingFont));

                        PdfPTable riskTable = new PdfPTable(2);
                        riskTable.setWidthPercentage(100);
                        riskTable.setSpacingAfter(15);

                        PdfPCell riskHeader = new PdfPCell(new Phrase("‚ö†Ô∏è Risk Factors", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, BaseColor.WHITE)));
                        riskHeader.setBackgroundColor(new BaseColor(220, 53, 69));
                        riskHeader.setPadding(8);
                        riskTable.addCell(riskHeader);

                        PdfPCell mitigationHeader = new PdfPCell(new Phrase("üõ°Ô∏è Mitigation Strategies", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, BaseColor.WHITE)));
                        mitigationHeader.setBackgroundColor(new BaseColor(40, 167, 69));
                        mitigationHeader.setPadding(8);
                        riskTable.addCell(mitigationHeader);

                        int maxRows = Math.max(risks.size(), mitigations.size());
                        for (int i = 0; i < maxRows; i++) {
                            String risk = i < risks.size() && risks.get(i) != null ? risks.get(i) : "";
                            String mitigation = i < mitigations.size() && mitigations.get(i) != null ? mitigations.get(i) : "";

                            PdfPCell riskCell = new PdfPCell(new Phrase(risk, smallFont));
                            riskCell.setPadding(6);
                            riskTable.addCell(riskCell);

                            PdfPCell mitigationCell = new PdfPCell(new Phrase(mitigation, smallFont));
                            mitigationCell.setPadding(6);
                            riskTable.addCell(mitigationCell);
                        }

                        document.add(riskTable);
                    }
                }
            }

            // Key Findings
            if (aiReport.containsKey("keyFindings") && aiReport.get("keyFindings") instanceof List) {
                document.add(new Paragraph("\nüî¨ Key Findings\n", headingFont));
                List<String> findings = (List<String>) aiReport.get("keyFindings");
                if (findings != null && !findings.isEmpty()) {
                    com.itextpdf.text.List findingsList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                    findingsList.setListSymbol("\u2022 ");
                    for (String finding : findings) {
                        if (finding != null) {
                            findingsList.add(new ListItem(finding, normalFont));
                        }
                    }
                    document.add(findingsList);
                }
                document.add(new Paragraph(" "));
            }

            // Statistics
            if (aiReport.containsKey("statistics") && aiReport.get("statistics") instanceof Map) {
                document.add(new Paragraph("\nüìà Statistics Overview\n", headingFont));
                Map<String, Object> stats = (Map<String, Object>) aiReport.get("statistics");

                if (stats != null && !stats.isEmpty()) {
                    PdfPTable statsTable = new PdfPTable(2);
                    statsTable.setWidthPercentage(80);
                    statsTable.setSpacingAfter(15);

                    for (Map.Entry<String, Object> entry : stats.entrySet()) {
                        if (entry.getKey() != null) {
                            PdfPCell keyCell = new PdfPCell(new Phrase(capitalizeFirst(entry.getKey()), normalFont));
                            keyCell.setBackgroundColor(new BaseColor(240, 240, 240));
                            keyCell.setPadding(8);
                            statsTable.addCell(keyCell);

                            String value = entry.getValue() != null ? String.valueOf(entry.getValue()) : "-";
                            PdfPCell valueCell = new PdfPCell(new Phrase(value, normalFont));
                            valueCell.setPadding(8);
                            statsTable.addCell(valueCell);
                        }
                    }
                    document.add(statsTable);
                }
            }

            // Recommendations - Audience-based
            if (aiReport.containsKey("recommendations") && aiReport.get("recommendations") != null) {
                document.add(new Paragraph("\nüí° Recommendations & Action Items\n", sectionFont));
                Object recsObj = aiReport.get("recommendations");

                // Check if new format (Map) or old format (List)
                if (recsObj instanceof Map) {
                    Map<String, Object> recs = (Map<String, Object>) recsObj;

                    if (recs.containsKey("forScientists") && recs.get("forScientists") instanceof List) {
                        List<String> scientistRecs = (List<String>) recs.get("forScientists");
                        if (scientistRecs != null && !scientistRecs.isEmpty()) {
                            document.add(new Paragraph("\nüî¨ For Scientists:", headingFont));
                            com.itextpdf.text.List scientistList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                            scientistList.setListSymbol("‚Ä¢ ");
                            for (String rec : scientistRecs) {
                                if (rec != null) {
                                    scientistList.add(new ListItem(rec, normalFont));
                                }
                            }
                            document.add(scientistList);
                        }
                    }

                    if (recs.containsKey("forManagers") && recs.get("forManagers") instanceof List) {
                        List<String> managerRecs = (List<String>) recs.get("forManagers");
                        if (managerRecs != null && !managerRecs.isEmpty()) {
                            document.add(new Paragraph("\nüíº For Research Managers:", headingFont));
                            com.itextpdf.text.List managerList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                            managerList.setListSymbol("‚Ä¢ ");
                            for (String rec : managerRecs) {
                                if (rec != null) {
                                    managerList.add(new ListItem(rec, normalFont));
                                }
                            }
                            document.add(managerList);
                        }
                    }

                    if (recs.containsKey("forMissionPlanners") && recs.get("forMissionPlanners") instanceof List) {
                        List<String> architectRecs = (List<String>) recs.get("forMissionPlanners");
                        if (architectRecs != null && !architectRecs.isEmpty()) {
                            document.add(new Paragraph("\nüöÄ For Mission Architects:", headingFont));
                            com.itextpdf.text.List architectList = new com.itextpdf.text.List(com.itextpdf.text.List.UNORDERED);
                            architectList.setListSymbol("‚Ä¢ ");
                            for (String rec : architectRecs) {
                                if (rec != null) {
                                    architectList.add(new ListItem(rec, normalFont));
                                }
                            }
                            document.add(architectList);
                        }
                    }
                } else if (recsObj instanceof List) {
                    // Fallback for old format
                    List<String> recommendations = (List<String>) recsObj;
                    if (recommendations != null && !recommendations.isEmpty()) {
                        com.itextpdf.text.List recList = new com.itextpdf.text.List(com.itextpdf.text.List.ORDERED);
                        for (String rec : recommendations) {
                            if (rec != null) {
                                recList.add(new ListItem(rec, normalFont));
                            }
                        }
                        document.add(recList);
                    }
                }
                document.add(new Paragraph(" "));
            }

            // Citations
            if (aiReport.containsKey("citations") && aiReport.get("citations") instanceof List) {
                List<String> citations = (List<String>) aiReport.get("citations");
                if (citations != null && !citations.isEmpty()) {
                    document.add(new Paragraph("\nüìö Key Studies Referenced\n", headingFont));
                    com.itextpdf.text.List citationsList = new com.itextpdf.text.List(com.itextpdf.text.List.ORDERED);
                    for (String citation : citations) {
                        if (citation != null) {
                            citationsList.add(new ListItem(citation, smallFont));
                        }
                    }
                    document.add(citationsList);
                    document.add(new Paragraph(" "));
                }
            }

            addSeparator(document);

            // ===== DETAILED DATA TABLES =====
            if (aiReport.containsKey("tables")) {
                document.add(new Paragraph("\nüìã Detailed Analysis Tables\n\n", sectionFont));
                List<Map<String, Object>> tables = (List<Map<String, Object>>) aiReport.get("tables");

                for (Map<String, Object> tableData : tables) {
                    String tableTitle = (String) tableData.getOrDefault("title", "Data Table");
                    document.add(new Paragraph(tableTitle, headingFont));
                    document.add(new Paragraph(" "));

                    List<String> columns = (List<String>) tableData.get("columns");
                    List<List<String>> rows = (List<List<String>>) tableData.get("rows");

                    if (columns != null && rows != null) {
                        PdfPTable dataTable = new PdfPTable(columns.size());
                        dataTable.setWidthPercentage(100);
                        dataTable.setSpacingAfter(15);

                        // Header row
                        for (String col : columns) {
                            PdfPCell headerCell = new PdfPCell(new Phrase(col, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10, BaseColor.WHITE)));
                            headerCell.setBackgroundColor(new BaseColor(54, 162, 235));
                            headerCell.setPadding(6);
                            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            dataTable.addCell(headerCell);
                        }

                        // Data rows
                        for (List<String> row : rows) {
                            for (String cell : row) {
                                PdfPCell dataCell = new PdfPCell(new Phrase(cell, smallFont));
                                dataCell.setPadding(5);
                                dataTable.addCell(dataCell);
                            }
                        }

                        document.add(dataTable);
                    }
                }
            }

            addSeparator(document);

            // ===== DATABASE QUERY RESULTS =====
            document.add(new Paragraph("\nüìö Database Query Results\n\n", sectionFont));
            List<Publication> results = publicationRepository.searchPublications(query);

            if (results != null && !results.isEmpty()) {
                // Summary statistics
                document.add(new Paragraph("Total Publications Found: " + results.size(), headingFont));
                document.add(new Paragraph(" "));

                // Detailed results table
                PdfPTable pubTable = new PdfPTable(new float[]{1, 4, 3, 5});
                pubTable.setWidthPercentage(100);
                pubTable.setSpacingBefore(10);
                pubTable.setSpacingAfter(20);

                // Header
                String[] headers = {"ID", "Title", "Author", "Summary"};
                for (String header : headers) {
                    PdfPCell headerCell = new PdfPCell(new Phrase(header, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10, BaseColor.WHITE)));
                    headerCell.setBackgroundColor(new BaseColor(70, 130, 180));
                    headerCell.setPadding(8);
                    headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    pubTable.addCell(headerCell);
                }

                // Data rows with alternating colors
                int rowCount = 0;
                for (Publication pub : results) {
                    BaseColor rowColor = (rowCount % 2 == 0) ? BaseColor.WHITE : new BaseColor(245, 245, 245);

                    addPubCell(pubTable, String.valueOf(pub.getId()), smallFont, rowColor);
                    addPubCell(pubTable, pub.getTitle() != null ? pub.getTitle() : "-", smallFont, rowColor);
                    addPubCell(pubTable, pub.getAuthor() != null ? pub.getAuthor() : "-", smallFont, rowColor);
                    addPubCell(pubTable, pub.getSummary() != null ? truncate(pub.getSummary(), 200) : "-", smallFont, rowColor);

                    rowCount++;
                }

                document.add(pubTable);
            } else {
                document.add(new Paragraph("No publications found matching the query.", normalFont));
            }

            // ===== FOOTER INFO =====
            addSeparator(document);
            Paragraph footer = new Paragraph("\n\nThis report was automatically generated by Astrogenesis AI Dashboard.\n" +
                    "Data source: NASA Open Science Data Repository (OSDR) and PubMed Central.\n" +
                    "For questions or feedback, please contact the research team.\n",
                    FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 9, BaseColor.GRAY));
            footer.setAlignment(Element.ALIGN_CENTER);
            document.add(footer);

            document.close();
            return new InputStreamResource(new ByteArrayInputStream(out.toByteArray()));

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Helper methods
    private void addMetaCell(PdfPTable table, String label, String value, Font font) {
        PdfPCell labelCell = new PdfPCell(new Phrase(label, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
        labelCell.setBorder(Rectangle.NO_BORDER);
        labelCell.setPadding(5);
        table.addCell(labelCell);

        PdfPCell valueCell = new PdfPCell(new Phrase(value, font));
        valueCell.setBorder(Rectangle.NO_BORDER);
        valueCell.setPadding(5);
        table.addCell(valueCell);
    }

    private void addPubCell(PdfPTable table, String text, Font font, BaseColor bgColor) {
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setBackgroundColor(bgColor);
        cell.setPadding(5);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        table.addCell(cell);
    }

    private void addSeparator(Document document) throws DocumentException {
        LineSeparator separator = new LineSeparator();
        separator.setLineColor(new BaseColor(200, 200, 200));
        document.add(separator);
    }

    private String truncate(String text, int length) {
        return text.length() > length ? text.substring(0, length) + "..." : text;
    }

    private String capitalizeFirst(String text) {
        if (text == null || text.isEmpty()) return text;
        return text.substring(0, 1).toUpperCase() + text.substring(1);
    }

    // Header/Footer page event handler
    static class HeaderFooterPageEvent extends PdfPageEventHelper {
        Font footerFont = FontFactory.getFont(FontFactory.HELVETICA, 8, BaseColor.GRAY);

        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            PdfContentByte cb = writer.getDirectContent();

            // Footer
            Phrase footer = new Phrase("Page " + writer.getPageNumber() + " | Astrogenesis ¬© 2025", footerFont);
            ColumnText.showTextAligned(cb, Element.ALIGN_CENTER,
                    footer,
                    (document.right() - document.left()) / 2 + document.leftMargin(),
                    document.bottom() - 10, 0);
        }
    }
}
